!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=1)}([function(e,t){var r=t;r.type=function(e){return Object.prototype.toString.call(e).replace(/\[object\s|\]/g,"")},r.isArray=function(e){return"Array"===r.type(e)},r.slice=function(e,t){return Array.prototype.slice.call(e,t)},r.truthy=function(e){return!!e},r.isString=function(e){return"String"===r.type(e)},r.each=function(e,t){for(var r=0,n=e.length;r<n;r++)t(e[r],r)},r.toArray=function(e){if(!e)return[];for(var t=[],r=0,n=e.length;r<n;r++)t.push(e[r]);return t},r.setAttr=function(e,t,r){switch(t){case"style":e.style.cssText=r;break;case"value":var n=e.tagName||"";"input"===(n=n.toLowerCase())||"textarea"===n?e.value=r:e.setAttribute(t,r);break;default:e.setAttribute(t,r)}}},function(e,t,r){"use strict";r.r(t);var n=r(0),o=r.n(n),i=0,a=1,l=2,c=3;function s(e,t){!function e(t,r,n){var s=n[r.index];var u=t.childNodes?t.childNodes.length:0;for(var f=0;f<u;f++){var p=t.childNodes[f];r.index++,e(p,r,n)}s&&function(e,t){o.a.each(t,function(t){switch(t.type){case i:var r="string"==typeof t.node?document.createTextNode(t.node):t.node.render();e.parentNode.replaceChild(r,e);break;case a:!function(e,t){var r=o.a.toArray(e.childNodes),n={};o.a.each(r,function(e){if(1===e.nodeType){var t=e.getAttribute("key");t&&(n[t]=e)}}),o.a.each(t,function(t){var o=t.index;if(0===t.type)r[o]===e.childNodes[o]&&e.removeChild(e.childNodes[o]),r.splice(o,1);else if(1===t.type){var i=n[t.item.key]?n[t.item.key].cloneNode(!0):"object"==typeof t.item?t.item.render():document.createTextNode(t.item);r.splice(o,0,i),e.insertBefore(i,e.childNodes[o]||null)}})}(e,t.moves);break;case l:!function(e,t){for(var r in t)if(void 0===t[r])e.removeAttribute(r);else{var n=t[r];o.a.setAttr(e,r,n)}}(e,t.props);break;case c:e.textContent?e.textContent=t.content:e.nodeValue=t.content;break;default:throw new Error("Unknown patch type "+t.type)}})}(t,s)}(e,{index:0},t)}s.REPLACE=i,s.REORDER=a,s.PROPS=l,s.TEXT=c;var u=s;function f(e,t){for(var r={},n=[],o=0,i=e.length;o<i;o++){var a=e[o],l=p(a,t);l?r[l]=o:n.push(a)}return{keyIndex:r,free:n}}function p(e,t){if(e&&t)return"string"==typeof t?e[t]:t(e)}function d(e,t,r,n){var i,a=[];if(null===t);else if(o.a.isString(e)&&o.a.isString(t))t!==e&&a.push({type:u.TEXT,content:t});else if(e.tagName===t.tagName&&e.key===t.key){var l=function(e,t){var r,n,o=0,i=e.props,a=t.props,l={};for(r in i)n=i[r],a[r]!==n&&(o++,l[r]=a[r]);for(r in a)n=a[r],i.hasOwnProperty(r)||(o++,l[r]=a[r]);if(0===o)return null;return l}(e,t);l&&a.push({type:u.PROPS,props:l}),(i=t).props&&i.props.hasOwnProperty("ignore")||function(e,t,r,n,i){var a=function(e,t,r){for(var n,o,i=f(e,r),a=f(t,r),l=a.free,c=i.keyIndex,s=a.keyIndex,u=[],d=[],h=0,y=0;h<e.length;){if(o=p(n=e[h],r))if(s.hasOwnProperty(o)){var v=s[o];d.push(t[v])}else d.push(null);else{var g=l[y++];d.push(g||null)}h++}var m=d.slice(0);for(console.log("children",d),h=0;h<m.length;)null===m[h]?(A(h),E(h)):h++;console.log("simulateList",m);for(var k=h=0;h<t.length;){o=p(n=t[h],r);var b=m[h],x=p(b,r);b?o===x?k++:c.hasOwnProperty(o)&&p(m[k+1],r)===o?(A(h),E(k),k++):w(h,n):w(h,n),h++}for(var N=m.length-k;k++<m.length;)A(--N+h);function A(e){var t={index:e,type:0};u.push(t)}function w(e,t){var r={index:e,item:t,type:1};u.push(r)}function E(e){m.splice(e,1)}return{moves:u,children:d}}(e,t,"key");if(t=a.children,a.moves.length){var l={type:u.REORDER,moves:a.moves};i.push(l)}var c=null,s=r;o.a.each(e,function(e,r){var o=t[r];s=c&&c.count?s+c.count+1:s+1,d(e,o,s,n),c=e})}(e.children,t.children,r,n,a)}else a.push({type:u.REPLACE,node:t});a.length&&(n[r]=a)}var h=function(e,t){var r={};return d(e,t,0,r),r};function y(e,t,r){if(!(this instanceof y))return o.a.isArray(r)||null==r||(r=o.a.slice(arguments,2).filter(o.a.truthy)),new y(e,t,r);o.a.isArray(t)&&(r=t,t={}),this.tagName=e,this.props=t||{},this.children=r||[],this.key=t?t.key:void 0;var n=0;o.a.each(this.children,function(e,t){e instanceof y?n+=e.count:r[t]=""+e,n++}),this.count=n}y.prototype.render=function(){var e=document.createElement(this.tagName),t=this.props;for(var r in t){var n=t[r];o.a.setAttr(e,r,n)}return o.a.each(this.children,function(t){var r=t instanceof y?t.render():document.createTextNode(t);e.appendChild(r)}),e};var v=y;let g=v("li",{key:"d",style:"color: red"},["li#d"]),m=(v("li",{key:"e",style:"color:green"},["li#e"]),v("li",{key:"a",style:"color: blue"},["li#a"])),k=v("li",{key:"b",style:"color: yellow"},["li#b"]),b=v("li",{key:"c",style:"color: orange"},["li#c"]),x=(v("li",{key:"f",style:"color: purple"},["li#f"]),v("ul",{key:"old"},[m,k,b,g])),N=v("ul",{key:"old"},[g,m,k,b]);var A=x.render();document.body.appendChild(A),console.time("start");var w=h(x,N);console.log(w),u(A,w),console.timeEnd("start")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,